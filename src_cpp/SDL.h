
#pragma once

#include <SDL2/SDL.h>

////////////////////////////////////////////////////////////
class SDL {
public:
	////////////////////////////////////////////////////////////
	/// \brief Initializes SDL2 library
	///
	/// \param[in] flags Flags to pass to SDL_Init()
	///
	/// \throws SDL2pp::Exception
	///
	/// \see http://wiki.libsdl.org/SDL_Init
	///
	////////////////////////////////////////////////////////////
	SDL(Uint32 flags=SDL_INIT_VIDEO);

	////////////////////////////////////////////////////////////
	/// \brief Destructor, deinitializes SDL2 library
	///
	/// \see http://wiki.libsdl.org/SDL_Quit
	///
	////////////////////////////////////////////////////////////
	virtual ~SDL();

	////////////////////////////////////////////////////////////
	/// \brief Deleted copy constructor
	///
	/// This class is not copyable
	///
	////////////////////////////////////////////////////////////
	SDL(const SDL& other) = delete;

	////////////////////////////////////////////////////////////
	/// \brief Deleted assignment operator
	///
	/// This class is not copyable
	///
	////////////////////////////////////////////////////////////
	SDL& operator=(const SDL& other) = delete;

	////////////////////////////////////////////////////////////
	/// \brief Deleted move constructor
	///
	/// This class is not movable
	///
	////////////////////////////////////////////////////////////
	SDL(SDL&& other) = delete;

	////////////////////////////////////////////////////////////
	/// \brief Deleted move assignment operator
	///
	/// This class is not movable
	///
	////////////////////////////////////////////////////////////
	SDL& operator=(SDL&& other) = delete;

	////////////////////////////////////////////////////////////
	/// \brief Checks which SDL2 subsystems were initialized
	///
	/// \param[in] flags 0 to return mask of initialized subsystems
	///                  or any combination of flags to return initialization
	///                  status of the specified subsystems
	///
	/// \returns Mask of initialized subsystems or the initialization
	///          status of the specified subsystems
	///
	/// \see http://wiki.libsdl.org/SDL_WasInit
	///
	////////////////////////////////////////////////////////////
	Uint32 WasInit(Uint32 flags);

};

